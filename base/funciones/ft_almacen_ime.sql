CREATE OR REPLACE FUNCTION alm.ft_almacen_ime (  p_administrador integer,  p_id_usuario integer,  p_tabla varchar,  p_transaccion varchar)RETURNS varchar AS$body$/************************************************************************** SISTEMA:        Almacenes FUNCION:        alm.ft_almacen_ime DESCRIPCION:    Funcion que gestiona las operaciones basicas (inserciones, modificaciones, eliminaciones de la tabla 'alm.talmacen' AUTOR:          Gonzalo Sarmiento FECHA:          21-09-2012 COMENTARIOS:  *************************************************************************** HISTORIAL DE MODIFICACIONES: DESCRIPCION:   AUTOR:           FECHA:      ***************************************************************************/DECLARE    v_nro_requerimiento     integer;    v_parametros            record;    v_id_requerimiento      integer;    v_resp                  varchar;    v_nombre_funcion        text;    v_mensaje_error         text;    v_id_almacen            integer;    v_estado                varchar;              BEGIN    v_nombre_funcion = 'alm.ft_almacen_ime';    v_parametros = pxp.f_get_record(p_tabla);    /*********************************       #TRANSACCION:  'SAL_ALM_INS'     #DESCRIPCION:  Insercion de registros     #AUTOR:        Gonzalo Sarmiento       #FECHA:        21-09-2012    ***********************************/    if(p_transaccion='SAL_ALM_INS')then        begin            --Sentencia de la insercion--            insert into alm.talmacen(                estado_reg,                fecha_mod,                fecha_reg,                id_usuario_mod,                id_usuario_reg,                codigo,                nombre,                localizacion,                estado,                id_departamento,                id_metodo_val            ) values (                'activo',                NULL,                now(),                NULL,                p_id_usuario,                 v_parametros.codigo,                v_parametros.nombre,                v_parametros.localizacion,                'activo',                v_parametros.id_departamento,                v_parametros.id_metodo_val            ) RETURNING id_almacen into v_id_almacen;                         --Definicion de la respuesta--            v_resp = pxp.f_agrega_clave(v_resp,'mensaje','Almacen almacenado(a) con exito (id_almacen'||v_id_almacen||')');            v_resp = pxp.f_agrega_clave(v_resp,'id_almacen',v_id_almacen::varchar);            return v_resp;        end;    /*********************************       #TRANSACCION:  'SAL_ALM_MOD'     #DESCRIPCION:  Modificacion de registros     #AUTOR:        Gonzalo Sarmiento       #FECHA:        21-09-2012    ***********************************/    elsif(p_transaccion='SAL_ALM_MOD')then        begin            update alm.talmacen set                fecha_mod = now(),                id_usuario_mod = p_id_usuario,                codigo = v_parametros.codigo,                nombre = v_parametros.nombre,                localizacion = v_parametros.localizacion,                id_departamento = v_parametros.id_departamento,                id_metodo_val = v_parametros.id_metodo_val            where id_almacen = v_parametros.id_almacen;                         --Definicion de la respuesta--            v_resp = pxp.f_agrega_clave(v_resp,'mensaje','Almacen modificado(a)');            v_resp = pxp.f_agrega_clave(v_resp,'id_almacen',v_parametros.id_almacen::VARCHAR);                        return v_resp;        end;    /*********************************       #TRANSACCION:  'SAL_ALM_ELI'     #DESCRIPCION:  Eliminacion de registros     #AUTOR:        Gonzalo Sarmiento       #FECHA:        21-09-2012    ***********************************/    elsif(p_transaccion='SAL_ALM_ELI')then        begin            update alm.talmacen set                fecha_mod = now(),                id_usuario_mod = p_id_usuario,                estado_reg = 'inactivo'            where id_almacen = v_parametros.id_almacen;                         --Definicion de la respuesta--            v_resp = pxp.f_agrega_clave(v_resp,'mensaje','Almacen eliminado(a)');            v_resp = pxp.f_agrega_clave(v_resp,'id_almacen',v_parametros.id_almacen::varchar);                        return v_resp;        end;        /*********************************       #TRANSACCION:  'SAL_SWEST_MOD'     #DESCRIPCION:  Actualizaci√≥n de estado     #AUTOR:        Ariel Ayaviri Omonte     #FECHA:        13-02-2013    ***********************************/    elsif(p_transaccion='SAL_SWEST_MOD')then        begin            select estado into v_estado             from alm.talmacen            where id_almacen = v_parametros.id_almacen;                        IF v_estado = 'inactivo' then                v_estado = 'activo';            ELSE                 v_estado = 'inactivo';            END IF;                        update alm.talmacen set                fecha_mod = now(),                id_usuario_mod = p_id_usuario,                estado = v_estado            where id_almacen = v_parametros.id_almacen;                        --Definicion de la respuesta--            v_resp = pxp.f_agrega_clave(v_resp,'mensaje','Almacen eliminado(a)');            v_resp = pxp.f_agrega_clave(v_resp,'id_almacen',v_parametros.id_almacen::varchar);                        return v_resp;        end;            /*********************************       #TRANSACCION:  'SAL_ALMSTO_INS'     #DESCRIPCION:  Inserta los stock minimos de todos los items a un almacen especifico, si es que no tuviera ninguno registrado     #AUTOR:        RCM     #FECHA:        03-03-2016    ***********************************/    elsif(p_transaccion='SAL_ALMSTO_INS')then        begin                    insert into alm.talmacen_stock(                id_usuario_reg,fecha_reg,estado_reg,id_almacen,id_item,                cantidad_min,cantidad_alerta_amarilla,cantidad_alerta_roja,id_metodo_val            )            select            p_id_usuario,now(),'activo',v_parametros.id_almacen,id_item,            1,1,1,            (select id_metodo_val from alm.tmetodo_val where codigo = 'PP')            from alm.titem            where estado_reg = 'activo'            and id_item not in (select id_item from alm.talmacen_stock where id_almacen = v_parametros.id_almacen);                        --Definicion de la respuesta--            v_resp = pxp.f_agrega_clave(v_resp,'mensaje','Stocks definidos)');            v_resp = pxp.f_agrega_clave(v_resp,'id_almacen',v_parametros.id_almacen::VARCHAR);                        return v_resp;        end;        else        raise exception 'Transaccion inexistente: %',p_transaccion;    end if;EXCEPTION                  WHEN OTHERS THEN        v_resp='';        v_resp = pxp.f_agrega_clave(v_resp,'mensaje',SQLERRM);        v_resp = pxp.f_agrega_clave(v_resp,'codigo_error',SQLSTATE);        v_resp = pxp.f_agrega_clave(v_resp,'procedimientos',v_nombre_funcion);        raise exception '%',v_resp;END;$body$LANGUAGE 'plpgsql'VOLATILECALLED ON NULL INPUTSECURITY INVOKERCOST 100;